Welcome to Module 5
===================

Please find the build and run instructions for Module 5 of the DevOps Course. The below contains the 
details to run the containers after they have been built using the ./build.sh script - is the preferred method - to 
aid the developer and for me when I forget: in about a day!
 
The development build script will pull the latest git controlled version of the todo application from github for this 
release only - this is a requirement for using directory binding; and local development as part of the set exercise - 
volumes could have been used instead. The docker build process and associated scripts used by the production release 
takes care of this and is part of the imaging script.

The most important thing to take into account is for the production release and its run arguments take into consideration 
that a .env environment file is present within the directory the command is executed from, and set with the appropriate 
token and Trello key:

echo 'key=yourtrellokey' >> .env
echo 'token=yourtrellotoken' >> .env

The docker build and scripts have been purposefully left seperate from the github repo and docker compose too. Docker 
compose yaml files are available if required to get a tick in the box.

Please also take into account that further readme and help is available from the original pull from github in the 
/svr/www/DevOps-Course-Starter directory for the application in general.

DEVELOPMENT AND PRODUCTION CONTAINER BUILD
==========================================

Please execute the build.sh script and choose the correct option and build the image accordingly.


PRODUCTION RUN
==============

docker run -d -p 5000:5000 --env-file .env todo-app:prod

DEVELOPMENT RUN
===============

docker run -it -p 5000:5000 --env-file .env --mount type=bind,source=$(pwd)/DevOps-Course-Starter,target=/srv/www/todo-app todo-app:dev 

1) On first boot of the container, please run "/tmp/source firstrun.sh" to configure poetry against the newly pulled down 
git repo that is bind mounted at /srv/www

2) *before running the server please update the relative path of the class import module:
    /srv/www/todo-app/todo_app/app.py

    original statement: from utils.classfunct import *

    required statement: .from utils.classfunct import *

3) To let you the Developer decide, starting of the inbuilt WSGI server can be executed manually using:

    cd /srv/www/todo-app
    ~/.poetry/bin/poetry run flask run




